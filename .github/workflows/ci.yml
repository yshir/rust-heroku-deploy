name: CI

on:
  workflow_dispatch:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  codestyle:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - uses: actions/checkout@v2
      - run: cargo fmt --all -- --check

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: clippy
      - uses: actions/checkout@v2
      - run: cargo clippy --all-targets -- -D clippy::all

  compile:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@v2
      - run: cargo check --all

  test:
    needs: [codestyle, lint, compile]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - name: Checkout
        uses: actions/checkout@v2
      - run: cargo test

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP }}/web:latest .

      - name: Login to container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Push Docker image
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP }}/web

      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.HEROKU_APP }} web
